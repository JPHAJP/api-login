openapi: 3.0.3
info:
  title: API Login - Sistema de Autenticación con Roles y Autorización
  description: |
    API REST para autenticación de usuarios con sistema de roles avanzado y proceso de autorización.

    ## Características principales:
    - Registro de usuarios con validación pendiente
    - Sistema de autorización por administradores
    - Múltiples roles de usuario
    - Autenticación JWT con tokens de acceso y refresh
    - Endpoints protegidos por roles
    - Gestión de fotografías de identificación
    - Validación de email y contraseñas seguras

    ## Roles disponibles:
    - **admin**: Administrador con acceso completo y capacidad de autorizar usuarios
    - **voluntarios**: Voluntarios de la organización
    - **personal**: Personal de la organización
    - **servicio_social**: Personas realizando servicio social
    - **visitas**: Visitantes autorizados
    - **familiares**: Familiares de beneficiarios
    - **donantes**: Donantes de la organización
    - **proveedores**: Proveedores de servicios o productos

    ## Proceso de registro y autorización:
    1. El usuario se registra con todos sus datos e identificación
    2. El usuario queda en estado "pending" (no autorizado)
    3. Un administrador revisa y autoriza al usuario
    4. El usuario puede iniciar sesión solo después de ser autorizado

    ## Autenticación:
    Los endpoints protegidos requieren un token JWT en el header Authorization:
    Authorization: Bearer <access_token>
    '''

  version: 2.0.0
  contact:
    name: José Pablo Hernández Alonso
    email: josepabloservicio@outlook.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Servidor de desarrollo local
  - url: https://api.tuempresa.com
    description: Servidor de producción

paths:
  /health:
    get:
      summary: Verificar estado del servidor
      description: Endpoint público para verificar que el servidor está funcionando correctamente
      tags:
        - Sistema
      responses:
        "200":
          description: Servidor funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  time:
                    type: string
                    format: date-time
                    example: "2025-10-09T10:30:00.123456"

  /auth/register:
    post:
      summary: Registrar nuevo usuario
      description: |
        Crea una nueva cuenta de usuario con estado "pending". El usuario debe ser autorizado
        por un administrador antes de poder iniciar sesión.
        
        **Nota**: La fotografía de identificación debe enviarse como base64 o mediante multipart/form-data.
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
                - nombre_completo
                - apellidos
                - direccion
                - edad
                - telefono
                - foto_identificacion
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: "juan.perez@example.com"
                  description: Dirección de email válida y única
                password:
                  type: string
                  minLength: 6
                  example: "securepassword123"
                  description: Contraseña de al menos 6 caracteres
                nombre_completo:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Juan"
                  description: Nombre(s) del usuario
                apellidos:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Pérez García"
                  description: Apellidos del usuario
                direccion:
                  type: string
                  minLength: 1
                  maxLength: 255
                  example: "Calle Principal #123, Col. Centro, Ciudad, CP 12345"
                  description: Dirección completa del usuario
                edad:
                  type: integer
                  minimum: 18
                  maximum: 120
                  example: 28
                  description: Edad del usuario (debe ser mayor de edad)
                telefono:
                  type: string
                  pattern: '^\+?[0-9]{10,15}$'
                  example: "+525512345678"
                  description: Número de teléfono con código de país (10-15 dígitos)
                foto_identificacion:
                  type: string
                  format: binary
                  description: Fotografía de identificación oficial (PNG, JPG, JPEG - máx 5MB)
                role:
                  type: string
                  enum: [voluntarios, personal, servicio_social, visitas, familiares, donantes, proveedores]
                  example: "voluntarios"
                  description: Rol solicitado por el usuario
      responses:
        "201":
          description: Usuario registrado exitosamente (pendiente de autorización)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario registrado exitosamente. Pendiente de autorización por un administrador."
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Datos inválidos o faltantes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_fields:
                  summary: Campos faltantes
                  value:
                    error: "Campos faltantes: nombre_completo, apellidos, direccion"
                invalid_email:
                  summary: Email inválido
                  value:
                    error: "Email inválido: Invalid email format"
                short_password:
                  summary: Contraseña muy corta
                  value:
                    error: "La contraseña debe tener al menos 6 caracteres."
                invalid_age:
                  summary: Edad inválida
                  value:
                    error: "Debe ser mayor de edad (18 años o más)."
                invalid_file:
                  summary: Archivo inválido
                  value:
                    error: "El archivo debe ser una imagen (PNG, JPG, JPEG) menor a 5MB."
        "409":
          description: Email ya registrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "El email ya está registrado."

  /auth/login:
    post:
      summary: Iniciar sesión
      description: |
        Autentica un usuario existente y devuelve tokens JWT.
        **Importante**: Solo usuarios autorizados pueden iniciar sesión.
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "juan.perez@example.com"
                password:
                  type: string
                  example: "securepassword123"
      responses:
        "200":
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login exitoso."
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        "400":
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Credenciales inválidas."
        "403":
          description: Usuario no autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Tu cuenta está pendiente de autorización. Por favor espera a que un administrador apruebe tu registro."

  /auth/refresh:
    post:
      summary: Renovar token de acceso
      description: |
        Genera un nuevo access token usando un refresh token válido.
        Actualiza el rol del usuario desde la base de datos.
      tags:
        - Autenticación
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: true
          description: "Bearer <refresh_token>"
          schema:
            type: string
            example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
      responses:
        "200":
          description: Token renovado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        "401":
          description: Token inválido o expirado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /profile:
    get:
      summary: Obtener perfil del usuario
      description: Devuelve la información del perfil del usuario autenticado
      tags:
        - Usuario
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Perfil del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Token inválido o faltante
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/users/pending:
    get:
      summary: Listar usuarios pendientes de autorización
      description: |
        Obtiene una lista de todos los usuarios que están pendientes de autorización.
        Solo accesible para usuarios con rol 'admin'.
      tags:
        - Administración
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Número de página
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Usuarios por página
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: role
          in: query
          description: Filtrar por rol
          schema:
            type: string
            enum: [voluntarios, personal, servicio_social, visitas, familiares, donantes, proveedores]
      responses:
        "200":
          description: Lista de usuarios pendientes
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                    example: 15
                    description: Total de usuarios pendientes
                  page:
                    type: integer
                    example: 1
                  per_page:
                    type: integer
                    example: 20
                  total_pages:
                    type: integer
                    example: 1
        "401":
          description: Token inválido o faltante
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Rol insuficiente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"

  /admin/users/{user_id}/authorize:
    post:
      summary: Autorizar usuario
      description: |
        Autoriza a un usuario pendiente, permitiéndole iniciar sesión.
        Solo accesible para usuarios con rol 'admin'.
      tags:
        - Administración
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID del usuario a autorizar
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Usuario autorizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario autorizado exitosamente."
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Usuario ya autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "El usuario ya está autorizado."
        "401":
          description: Token inválido o faltante
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Rol insuficiente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Usuario no encontrado."

  /admin/users/{user_id}/reject:
    post:
      summary: Rechazar usuario
      description: |
        Rechaza y elimina la solicitud de registro de un usuario pendiente.
        Solo accesible para usuarios con rol 'admin'.
      tags:
        - Administración
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID del usuario a rechazar
          schema:
            type: integer
            example: 5
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: "Documentación insuficiente"
                  description: Razón del rechazo (opcional)
      responses:
        "200":
          description: Usuario rechazado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario rechazado y eliminado exitosamente."
        "400":
          description: Usuario ya autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "No se puede rechazar un usuario ya autorizado."
        "401":
          description: Token inválido o faltante
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Rol insuficiente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/users/{user_id}/identification:
    get:
      summary: Ver identificación de usuario
      description: |
        Obtiene la fotografía de identificación de un usuario.
        Solo accesible para usuarios con rol 'admin'.
      tags:
        - Administración
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID del usuario
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Imagen de identificación
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        "401":
          description: Token inválido o faltante
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Rol insuficiente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"
        "404":
          description: Usuario o identificación no encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /admin/stats:
    get:
      summary: Estadísticas de administración
      description: |
        Obtiene estadísticas del sistema incluyendo usuarios por rol y estado de autorización.
        Solo accesible para usuarios con rol 'admin'.
      tags:
        - Administración
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Estadísticas del sistema
          content:
            application/json:
              schema:
                type: object
                properties:
                  users_total:
                    type: integer
                    example: 150
                    description: Total de usuarios registrados
                  users_authorized:
                    type: integer
                    example: 120
                    description: Total de usuarios autorizados
                  users_pending:
                    type: integer
                    example: 30
                    description: Total de usuarios pendientes
                  users_by_role:
                    type: object
                    properties:
                      admin:
                        type: integer
                        example: 5
                      voluntarios:
                        type: integer
                        example: 40
                      personal:
                        type: integer
                        example: 25
                      servicio_social:
                        type: integer
                        example: 15
                      visitas:
                        type: integer
                        example: 20
                      familiares:
                        type: integer
                        example: 30
                      donantes:
                        type: integer
                        example: 10
                      proveedores:
                        type: integer
                        example: 5
        "401":
          description: Token inválido o faltante
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Rol insuficiente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT obtenido al hacer login o registro.

        Ejemplo: `Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...`

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: ID único del usuario
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
          description: Dirección de email
        nombre_completo:
          type: string
          example: "Juan"
          description: Nombre(s) del usuario
        apellidos:
          type: string
          example: "Pérez García"
          description: Apellidos del usuario
        direccion:
          type: string
          example: "Calle Principal #123, Col. Centro"
          description: Dirección completa
        edad:
          type: integer
          example: 28
          description: Edad del usuario
        telefono:
          type: string
          example: "+525512345678"
          description: Número de teléfono
        role:
          type: string
          enum: [admin, voluntarios, personal, servicio_social, visitas, familiares, donantes, proveedores]
          example: "voluntarios"
          description: Rol del usuario
        is_authorized:
          type: boolean
          example: true
          description: Estado de autorización del usuario
        foto_identificacion_path:
          type: string
          example: "/data/identificaciones/user_1_id.jpg"
          description: Ruta de la fotografía de identificación
        created_at:
          type: string
          format: date-time
          example: "2025-10-09T10:30:00.123456"
          description: Fecha y hora de creación de la cuenta
        authorized_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-10-09T14:20:00.123456"
          description: Fecha y hora de autorización

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Campos faltantes: email, password"
          description: Descripción del error
        detail:
          type: string
          example: "Información adicional sobre el error"
          description: Detalles adicionales del error (opcional)

    ForbiddenResponse:
      type: object
      properties:
        error:
          type: string
          example: "Forbidden"
        detail:
          type: string
          example: "Rol insuficiente para acceder a este recurso."
        required_roles:
          type: array
          items:
            type: string
          example: ["admin"]
        current_role:
          type: string
          example: "voluntarios"

tags:
  - name: Sistema
    description: Endpoints del sistema y salud
  - name: Autenticación
    description: Registro, login y gestión de tokens
  - name: Usuario
    description: Operaciones del perfil del usuario
  - name: Administración
    description: Funciones exclusivas para administradores

externalDocs:
  description: Repositorio del proyecto en GitHub
  url: https://github.com/JPHAJP/api-login